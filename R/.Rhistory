?mean
??mean
??t.test
class(5L)
getwd()
# Zuweisung Variable
a <- 5L
# mit L hinten is es ein Integer
class(a)
class(b)
#Zuweisung Parameter (wenn ichs einer Funktion übergeb)
b = 6
class(b)
# ich erstelle Vektor mit :
1:5
class(1:5)
#unendlich ist numerisch
class(Inf)
# kommt selten vor: not a number
class(NaN)
# strings heißen characters
class("abc")
class('abs')
# print printet wie in Python
print(das is lustig)
# print printet wie in Python
print("das is lustig")
# TRUE kann man abkürzen mit T
class(T)
class(F)
# NULL is nichts
class(NULL)
str(1:1000)
# in echt:
is.integer(5)
is.na(c(1,2,3,NA,4,5))
# ich frage ab: ist eine NA in einem  Vektor? Ich mach Vektor mit c()
# ich weiß gleich: an der vierten Stellen fehlen Daten
# es ist nicht nichts- es ist ein NA- Wert -> ich kann keine Summe bilden (NA kann alles sein)
# ich müsst vorher NA entfernen
# fehlerhafte Dateneinlese zB.: 1,1,1,2,,2,1,2  <- dort is NA Wert
# später deklarier ich meine Ausreißer mit NA-Wert
is.na(c(1,2,3,,4,5))
# NULL zeigt im Speicher auf eine nPlatz, die das Nichts kennzeichnen - irgendwie blöd
is.null(n)
# ist mein Wert endlich?
is.finite(1000)
str(c(T,1))
str(c(T, "abc"))
str(c(F, 3L, -5, "name"))
# ich kann das aber auch erzwingen
str(as.integer(TRUE))
str(as.logical("TRUE"))
str(as.logical("name"))
# create mit c() (steht für combine)
x<- c(1,2,3)
print(x)
# auch aus Characters anlegbar
c("a", "b", "c")
# auch unterschiedliche Datentypen verwendbar, aber die werden nach oben genannter Reihenfolge
# konvertiert
c(T, 1, "hello")
5:10
3:-8
seq(1,5)
# aber auch mit anderen Einstellungen möglich
seq(1,10, by = 2)
seq(1,10, length = 3)
seq(1,10, along.with = v)
# repeat
rep(5, 10)
rep(TRUE, 5)
c(seq(1,5), rep(9,4), -42, 5:8)
# ich bau mir einen lustigen Vektor:
x <- c(seq(1,5), rep(9,4), -42, 5:8)
is.vector(x)
# die Länge
length(c("a", "x"))
# in R gibts keine Skalarwerte: keine Einzelwerte. Intern sind alle Sachen  Vektoren
is.vector(5)
# VORSICHT: R beginnt seinen Index mit 1
v <- 1:100
v[5]
# Index in der eckigen Klammer (auch ein Vektor)
v2 <- c(5,9,13)
v[v2]
v2[2]
index2 <- v < 10
print(index2)
v[index2]
# oder
v[v<10]
print(v)
# ich möchte an einer Stelle einen Werte ersetzen
v[5] <- NA
# an 5. Stelle möcht ich ein NA stehen haben
v[c(8,10)] <- NA
print(v)
is.na(v)
# index von den NA werten
which(is.na(v))
# ich möcht diese NA-werte gleich null setzen, der erste Teil is Werte von Positionen 5,8,10
# und setz diese auf null
v[is.na(v)] <- 0
print(v)
v2 <- 1:10
print(v2)
c(v2[1:5], 100, v2[6:10])
# Pltze löschen geht leichter
v2[-2]
# zweite Position ist gelöscht mit minus
v2[-c(3,5)]
str(factor(c("a", "b", "c", "a", "b", "b")))
f <- factor(c("a", "b", "c", "a", "b", "b"))
summary(f)
table(f)
plot(f)
# welche Werte kommen vor,
# welche Levels gibt es,
#
f3 <- factor(c("s", "m", "s", "l", "m", "s"),
levels = c("s", "m", "l"),
ordered = TRUE)
f3 <- factor(c("s", "m", "s", "l", "m", "s"),
levels = c("s", "m", "l"),
ordered = TRUE)
str(f3)
f3[1] < f3[2]
# ich mach eine Matrix:
# Werte, dann Zeilen und Spalten
matrix(1:12,nrow = 3, ncol = 4)
# ich mach eine Matrix:
# Werte, dann Zeilen und Spalte
m<- matrix(1:12,nrow = 3, ncol = 4)
# manchmal mag ichs anders befüllt haben
matrix(1:12, nrow=3, ncol=4, byrow = TRUE)
class(m)
is.matrix(m)
# Matrix mit leeren Werten als Platzhalter erstellen
matrix(nrow=2, ncol=2)
# da is alles NA
# will ich null dann so:
matrix(0, nrow=2, ncol=2)
matrix(c(0,1), nrow=3, ncol=3)
matrix(c(0,1), nrow=2, ncol=3)
length(m)
# Dimension
dim(m)
# will ich null dann so:
d<-matrix(0, nrow=2, ncol=2)
# sagt mir die Einträge
length(d)
zeilen <- dim(m)[1]
print(zeilen)
nrow(m)
ncol(m)
# Zugriff auch mit eckiger Klammer, aber Zeile, Spalte
m[2,2]
m[1:2,2]
# zeigt Matrize ohne zweite Spalte an
m[-1, -c(2,3)]
# Werte hinzufügen? Spalte oder Zeile
cbind(m, rep(1,3))
rbind(m, 1000:1003)
# soland ichs nicht zuweise, bleibt m original!!
# im normalfall dann wieder zuweisen
m <- rbind(m, 1000:1003)
print(m)
# erste Zeile, zweite Spalte wird zu einem NA
print(m)
# Werte ersetzen:
#ich such ausm Index meine Werte und ersetz sie
m[1,2] <- NA
# erste Zeile, zweite Spalte wird zu einem NA
print(m)
n <- matrix(1:12, nrow= 3)
rownames(n) <- LETTERS[1:3]
colnames(n) <- letters[1:4]
print(m)
print(n)
# ich kann jetzt mit den Buchstaben drauf zugreifen
m["B", "c"]
# ich kann jetzt mit den Buchstaben drauf zugreifen
n["B", "c"]
colnames(n)
which(colnames(n) == "b")
